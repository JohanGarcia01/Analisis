tdEnx <- c(6,8,10,12,1,16,18,20)
y <- c(8.5 , 9.2 , 12.7 , 18.4 , 21.6 , 17.9 , 11 , 9)

newtonInterpolacion = function(x, y, a) {
n = length(x)
A = matrix(rep(NA, times = n^2), nrow = n, ncol = n)
A[,1] = y
for (k in 2:n) {
A[k:n, k] = (A[k:n, k-1] - A[(k-1):(n-1), k-1] ) / (x[k:n] - x[1:(n-k+1)])
}
print(A)
smds = rep(NA, length = n)
smds[1] = 1 
for (k in 2:n) {
smds[k] = (a - x[k-1])*smds[k-1]
}
return(sum(diag(A)*smds) )
}

install.packages("PolynomF")
require(PolynomF)
temperatura = y[0:8]; hora = x[0:8]
polyAjuste = poly.calc(hora,temperatura)
polyAjuste
plot(hora,temperatura, pch=19, cex=1, col = "blue", asp=1) 
curve(polyAjuste,add=T)


aux<-newtonInterpolacion(x[0:8], y[0:8], 7)
resultados<-c(aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 9)
resultados<-c(resultados,aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 11)
resultados<-c(resultados,aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 13)
resultados<-c(resultados,aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 15)
resultados<-c(resultados,aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 17)
resultados<-c(resultados,aux)
aux<-newtonInterpolacion(x[0:8], y[0:8], 19)
resultados<-c(resultados,aux)
puntos<-c(7,9,11,13,15,17,19)


points(puntos,resultados)
